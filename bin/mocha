#!/usr/bin/env node

'use strict';

/**
 * This tiny wrapper file checks for known node flags and appends them
 * when found, before invoking the "real" _mocha(1) executable.
 */

const spawn = require('child_process').spawn;
const path = require('path');
const getOptions = require('./options');
const args = [path.join(__dirname, '_mocha')];
const envFlags = process.allowedEnvironmentNodeFlags;

// Load mocha.opts into process.argv
// Must be loaded here to handle node-specific options
getOptions();

process.argv.slice(2).forEach(arg => {
  const flag = arg.split('=')[0];

  // every flag UNSHIFTED onto the `args` array is
  // an flag for the `node` executable; every flag
  // PUSHED onto the `args` array is a Mocha flag.

  switch (flag) {
    // non-standard debug flags.
    // any debug-related flag needs Mocha's --no-timeouts
    // or Mocha will timeout while the debugger is paused.
    case '-d':
    case 'debug':
      // rename flag
      args.unshift('--debug');
      args.push('--no-timeouts');
      break;
    case '--debug':
    case '--debug-brk':
    case '--inspect':
    case '--inspect-brk':
      args.unshift(arg);
      args.push('--no-timeouts');
      break;
    // non-standard flag
    case '-gc':
      // rename flag
      args.unshift('--expose-gc');
      break;
    default:
      if (
        envFlags.indexOf(arg) > -1 ||
        arg.indexOf('--harmony') === 0 ||
        arg.indexOf('--preserve-symlinks') === 0
      ) {
        // these are Node.js flags supported by NODE_OPTIONS,
        // convenience for --harmony-* flags, and the two
        // --preserve-symlinks-* flags which aren't supported
        // by NODE_OPTIONS for security reasons
        args.unshift(arg);
      } else if (arg.indexOf('--v8-') === 0) {
        // for v8 flags, prepend "--v8-" to flag name to
        // pass directly to Node.  but not --v8-options
        // since that's just akin to --help
        if (arg !== '--v8-options') {
          args.unshift(`--${arg.slice(5)}`);
        }
      } else {
        // treat as Mocha option
        args.push(arg);
      }
      break;
  }
});

const proc = spawn(process.execPath, args, {
  stdio: 'inherit'
});
proc.on('exit', (code, signal) => {
  process.on('exit', () => {
    if (signal) {
      process.kill(process.pid, signal);
    } else {
      process.exit(code);
    }
  });
});

// terminate children.
process.on('SIGINT', () => {
  proc.kill('SIGINT'); // calls runner.abort()
  proc.kill('SIGTERM'); // if that didn't work, we're probably in an infinite loop, so make it die.
});
